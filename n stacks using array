//Implemented on code studio
class NStack {
    // Initialize your data structure.
    int *arr ;
    int *next;
    int *top;
    int n,size,freespot;
    public:
    NStack(int N, int S) {
        n=N;//n->no.of stacks
        size=S;//s->size of array
        arr=new int[size];
        top=new int[n];
        next=new int[size];
        //intialize top[]
        for(int i=0;i<n;i++)
            top[i]=-1;
        //initialize next[]
        for(int i=0;i<size-1;i++)
            next[i]=i+1;
        //initialize last index value to -1
        next[size-1]=-1;//indicates end of free list
        //initialize free spot
        freespot=0;
    }

    // Pushes 'X' into the Mth stack. Returns true if it gets pushed into the stack, and false otherwise.
     bool push(int x, int m) {
        //check for overflow
        if(freespot==-1)
            return false;
        //find index
        int index=freespot;
        //update freespot
        freespot=next[index];
        //insert in array
        arr[index]=x;
        //update next
        next[index]=top[m-1];//taken m-1 as 0 based indexing
        //update top
        top[m-1]=index;
        return true; 
    }

    // Pops top element from Mth Stack. Returns -1 if the stack is empty, otherwise returns the popped element.
     int pop(int m) {
        //check underflow
        if(top[m-1]==-1)
            return -1;
        int index=top[m-1];    //doing reverse of push()
        top[m-1]=next[index];
        next[index]=freespot;
        freespot=index;
        return arr[index];
    }
};
